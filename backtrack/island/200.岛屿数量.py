#
# @lc app=leetcode.cn id=200 lang=python3
#
# [200] 岛屿数量
#

# @lc code=start
# 法1：回溯，即dfs
# class Solution:
#     def numIslands(self, grid: List[List[str]]) -> int:
#         m, n = len(grid), len(grid[0])
        
#         def dfs(i, j):
#             if 0<= i < m and 0 <= j < n and grid[i][j] == '1':
#                 grid[i][j] = '0'
#                 pos = [(1,0), (-1, 0), (0, 1), (0, -1)]
#                 for p in pos:
#                     x = p[0] + i
#                     y = p[1] + j
#                     dfs(x, y)
                    
        
#         res = 0
#         for i in range(m):
#             for j in range(n):
#                 if grid[i][j] == '1':
#                     dfs(i, j)
#                     res += 1
#         return res
# 法2 bfs 分析访问标记在入队还是在出队，举细菌繁殖的例子
from typing import List
class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        m, n = len(grid), len(grid[0])
        
        def bfs(i, j):
            queue = [(i, j)]
            grid[i][j] = '0'
            pos = [(0, 1), (0, -1), (1, 0), (-1, 0)]
            
            s = set()
            while queue:
                sz = len(queue)
                print(sz)
                #for i in range(sz):
                row, col = queue.pop(0)
                #grid[row][col] = '0'
                for p in pos:
                    x = row + p[0]
                    y = col + p[1]
                    if 0 <= x < m and 0 <= y < n and grid[x][y] == '1':
                        grid[x][y] = '0'
                        queue.append((x, y))
                            # print(x, y)
                            # if (x, y) not in s:
                            #     s.add((x,y))
                            # else :
                            #     print(f'The error is {x, y}')
                                
                    
        
        res = 0
        for i in range(m):
            for j in range(n):
                if grid[i][j] == '1':
                    bfs(i, j)
                    res += 1
        return res


# @lc code=end
obj = Solution()
grid = [["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]]
for v in grid:
    print(v)
print(f'grid size: {len(grid) * len(grid[0])}')
obj.numIslands(grid)
